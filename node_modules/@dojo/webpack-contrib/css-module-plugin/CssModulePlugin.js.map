{"version":3,"file":"CssModulePlugin.js","sourceRoot":"","sources":["CssModulePlugin.ts"],"names":[],"mappings":";;AAAA,2BAAgC;AAChC,+BAA2D;AAC3D,qCAAkE;AAElE;;;;;;;;GAQG;AACH,oBAAoB,EAAU;IAC7B,MAAM,KAAK,GAAG,gBAAS,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IACtC,MAAM,CAAC,KAAK,KAAK,UAAG,IAAI,KAAK,KAAK,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AACzD,CAAC;AAED;IAGC,YAAY,QAAgB;QAC3B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC1B,CAAC;IAED,KAAK,CAAC,QAAkB;QACvB,MAAM,SAAS,GAAG,IAAI,uCAA6B,CAAC,WAAW,EAAE,CAAC,MAAW,EAAE,EAAE;YAChF,EAAE,CAAC,CAAC,iBAAU,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBAChC,MAAM,CAAC;YACR,CAAC;YACD,MAAM,eAAe,GAAG,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC;gBACjD,CAAC,CAAC,cAAO,CAAC,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC,OAAO,CAAC;gBACzC,CAAC,CAAC,cAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,cAAc,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;YAC1D,MAAM,UAAU,GAAG,eAAe,GAAG,KAAK,CAAC;YAE3C,EAAE,CAAC,CAAC,eAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;gBAC5B,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;YACnE,CAAC;QACF,CAAC,CAAC,CAAC;QACH,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;IAC3B,CAAC;CACD;AAvBD,kCAuBC","sourcesContent":["import { existsSync } from 'fs';\nimport { normalize, sep, isAbsolute, resolve } from 'path';\nimport { Compiler, NormalModuleReplacementPlugin } from 'webpack';\n\n/**\n * Test whether a module ID is relative or absolute.\n *\n * @param id\n * The module ID.\n *\n * @return\n * `true` if the path is relative; `false` otherwise.\n */\nfunction isRelative(id: string): boolean {\n\tconst first = normalize(id.charAt(0));\n\treturn first !== sep && first !== '@' && /^\\W/.test(id);\n}\n\nexport default class CssModulePlugin {\n\tprivate basePath: string;\n\n\tconstructor(basePath: string) {\n\t\tthis.basePath = basePath;\n\t}\n\n\tapply(compiler: Compiler) {\n\t\tconst nmrPlugin = new NormalModuleReplacementPlugin(/\\.m\\.css$/, (result: any) => {\n\t\t\tif (isAbsolute(result.request)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst requestFileName = isRelative(result.request)\n\t\t\t\t? resolve(result.context, result.request)\n\t\t\t\t: resolve(this.basePath, 'node_modules', result.request);\n\t\t\tconst jsFileName = requestFileName + '.js';\n\n\t\t\tif (existsSync(jsFileName)) {\n\t\t\t\tresult.request = result.request.replace(/\\.m\\.css$/, '.m.css.js');\n\t\t\t}\n\t\t});\n\t\tnmrPlugin.apply(compiler);\n\t}\n}\n"]}