import { Compiler } from 'webpack';
export interface I18nPluginOptions {
    /**
     * An optional list of CLDR JSON paths used to inject CLDR data into the application.
     */
    cldrPaths?: string[];
    /**
     * The default locale for the application or custom element.
     */
    defaultLocale: string;
    /**
     * An optional list of supported locales beyond the default. When the application starts, this list
     * is checked for the user's locale. If found, then the locale is set to the user's locale. Otherwise,
     * the default locale is used.
     */
    supportedLocales?: string[];
    /**
     * An optional entry point into which the i18n module should be injected. Defaults to 'src/main.ts'.
     * Since this is compared to the fully-resolved resource path, an extension should be used whenever
     * possible.
     */
    target?: string;
}
/**
 * A custom Webpack plugin that injects into the specified entry point a module responsible to setting the locale
 * and registering CLDR data.
 */
export default class I18nPlugin {
    readonly cldrPaths?: string[];
    readonly defaultLocale: string;
    readonly supportedLocales?: string[];
    readonly target: RegExp;
    constructor({cldrPaths, defaultLocale, supportedLocales, target}: I18nPluginOptions);
    /**
     * Inject a module that sets the locale and CLDR data for the bundled application or custom element.
     *
     * @param compiler The Webpack compiler
     */
    apply(compiler: Compiler): void;
    /**
     * @private
     * Load CLDR data from the provided mids and merge the data into a single object.
     *
     * @return The CLDR data object
     */
    private _loadCldrData();
}
