{"version":3,"file":"viewer.js","sourceRoot":"","sources":["viewer.ts"],"names":[],"mappings":";;AAAA,6BAA6B;AAC7B,+BAA+B;AAC/B,6BAA6B;AAC7B,gCAAgC;AAChC,uCAAuC;AAQvC,4BAAmC,WAAgB,EAAE,OAAmC,EAAE;IACzF,MAAM,EAAE,cAAc,GAAG,aAAa,EAAE,SAAS,GAAG,IAAI,EAAE,aAAa,EAAE,GAAG,IAAI,CAAC;IAEjF,IAAI,kBAA0B,CAAC;IAC/B,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;QACnB,kBAAkB,GAAG,IAAI,MAAM,CAAC,aAAa,CAAC,CAAC;IAChD,CAAC;IAED,MAAM,SAAS,GAAU,QAAQ,CAAC,aAAa,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;IACxE,IAAI,cAAc,GAAG,cAAc,CAAC;IAEpC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;QACtC,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,IAAI,OAAO,CAAC,GAAG,EAAE,EAAE,cAAc,CAAC,CAAC;IAC3E,CAAC;IACD,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC;IACzC,MAAM,WAAW,GAAa,EAAE,CAAC;IACjC,MAAM,aAAa,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC,aAAkB,EAAE,IAAS,EAAE,EAAE;QACxE,MAAM,cAAc,GAAG,IAAI,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAChF,EAAE,CAAC,CAAC,aAAa,IAAI,kBAAkB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;YAC9D,MAAM,CAAC,aAAa,CAAC;QACtB,CAAC;QACD,WAAW,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QACjC,aAAa,CAAC,cAAc,CAAC,GAAG,IAAI,CAAC;QACrC,MAAM,CAAC,aAAa,CAAC;IACtB,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,MAAM,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,UAAU,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;IAC/E,aAAa,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;QAC9B,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;IAC/G,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,aAAa,CACf,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE,kBAAkB,CAAC,EAC3D,4BAA4B,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,EAAE,CAC3D,CAAC;IACF,EAAE,CAAC,aAAa,CACf,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE,eAAe,CAAC,EACxD,yBAAyB,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,EAAE,CACtD,CAAC;AACH,CAAC;AAtCD,gDAsCC","sourcesContent":["import * as path from 'path';\nimport * as fs from 'fs-extra';\nimport * as glob from 'glob';\nimport * as mkdir from 'mkdirp';\nimport * as analyzer from './analyzer';\n\nexport interface ReportDataOptions {\n\treportFilename: string;\n\tbundleDir: string | null;\n\texcludeBundle: string;\n}\n\nexport function generateReportData(bundleStats: any, opts: Partial<ReportDataOptions> = {}) {\n\tconst { reportFilename = 'report.html', bundleDir = null, excludeBundle } = opts;\n\n\tlet excludeBundleRegex: RegExp;\n\tif (excludeBundle) {\n\t\texcludeBundleRegex = new RegExp(excludeBundle);\n\t}\n\n\tconst chartData: any[] = analyzer.getViewerData(bundleStats, bundleDir);\n\tlet reportFilePath = reportFilename;\n\n\tif (!path.isAbsolute(reportFilePath)) {\n\t\treportFilePath = path.resolve(bundleDir || process.cwd(), reportFilePath);\n\t}\n\tmkdir.sync(path.dirname(reportFilePath));\n\tconst bundlesList: string[] = [];\n\tconst bundleContent = chartData.reduce((bundleContent: any, data: any) => {\n\t\tconst bundleFilename = data && data.label && data.label.split('/').slice(-1)[0];\n\t\tif (excludeBundle && excludeBundleRegex.test(bundleFilename)) {\n\t\t\treturn bundleContent;\n\t\t}\n\t\tbundlesList.push(bundleFilename);\n\t\tbundleContent[bundleFilename] = data;\n\t\treturn bundleContent;\n\t}, {});\n\n\tconst reporterFiles = glob.sync(path.join(__dirname, 'reporter', '**', '*.*'));\n\treporterFiles.forEach((file) => {\n\t\tfs.copySync(file, path.join(path.dirname(reportFilePath), `${path.parse(file).name}${path.parse(file).ext}`));\n\t});\n\tfs.writeFileSync(\n\t\tpath.join(path.dirname(reportFilePath), `bundleContent.js`),\n\t\t`window.__bundleContent = ${JSON.stringify(bundleContent)}`\n\t);\n\tfs.writeFileSync(\n\t\tpath.join(path.dirname(reportFilePath), `bundleList.js`),\n\t\t`window.__bundleList = ${JSON.stringify(bundlesList)}`\n\t);\n}\n"]}