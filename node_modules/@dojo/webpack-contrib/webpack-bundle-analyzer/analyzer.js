"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const _ = require("lodash");
const gzipSize = require("gzip-size");
const Folder_1 = require("./tree/Folder");
const parseUtils_1 = require("./parseUtils");
const FILENAME_QUERY_REGEXP = /\?.*$/;
function getViewerData(bundleStats, bundleDir) {
    if (_.isEmpty(bundleStats.assets) && !_.isEmpty(bundleStats.children)) {
        bundleStats = bundleStats.children[0];
    }
    bundleStats.assets = _.filter(bundleStats.assets, (asset) => {
        asset.name = asset.name.replace(FILENAME_QUERY_REGEXP, '');
        return _.endsWith(asset.name, '.js') && !_.isEmpty(asset.chunks);
    });
    let bundlesSources = null;
    let parsedModules = null;
    if (bundleDir) {
        bundlesSources = {};
        parsedModules = {};
        for (const statAsset of bundleStats.assets) {
            const assetFile = path.join(bundleDir, statAsset.name);
            let bundleInfo;
            try {
                bundleInfo = parseUtils_1.parseBundle(assetFile);
            }
            catch (err) {
                bundleInfo = null;
            }
            if (!bundleInfo) {
                parsedModules = null;
                bundlesSources = null;
                break;
            }
            bundlesSources[statAsset.name] = bundleInfo.src;
            _.assign(parsedModules, bundleInfo.modules);
        }
    }
    const assets = _.transform(bundleStats.assets, (result, statAsset) => {
        const asset = (result[statAsset.name] = _.pick(statAsset, 'size'));
        if (bundlesSources) {
            asset.parsedSize = bundlesSources[statAsset.name].length;
            asset.gzipSize = gzipSize.sync(bundlesSources[statAsset.name]);
        }
        asset.modules = _(bundleStats.modules)
            .filter((statModule) => assetHasModule(statAsset, statModule))
            .each((statModule) => {
            if (parsedModules) {
                statModule.parsedSrc = parsedModules[statModule.id];
            }
        });
        asset.tree = createModulesTree(asset.modules);
    }, {});
    return _.transform(assets, (result, asset, filename) => {
        result.push({
            label: filename,
            statSize: asset.tree.size,
            parsedSize: asset.parsedSize,
            gzipSize: asset.gzipSize,
            groups: _.invokeMap(asset.tree.children, 'toChartData')
        });
    }, []);
}
exports.getViewerData = getViewerData;
function assetHasModule(statAsset, statModule) {
    return _.some(statModule.chunks, (moduleChunk) => _.includes(statAsset.chunks, moduleChunk));
}
function createModulesTree(modules) {
    const root = new Folder_1.default('.');
    _.each(modules, (module) => root.addModule(module));
    return root;
}
//# sourceMappingURL=analyzer.js.map