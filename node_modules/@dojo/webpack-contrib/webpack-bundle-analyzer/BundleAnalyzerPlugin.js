"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const path = require("path");
const mkdir = require("mkdirp");
const viewer = require("./viewer");
const bfj = require('bfj-node4');
class BundleAnalyzerPlugin {
    constructor(opts) {
        this.opts = Object.assign({ reportFilename: 'report.html', generateStatsFile: false, statsFilename: 'stats.json', statsOptions: null, analyzerMode: '', openAnalyzer: false }, opts);
    }
    apply(compiler) {
        this.compiler = compiler;
        const done = (stats) => {
            stats = stats.toJson(this.opts.statsOptions);
            if (this.opts.generateStatsFile) {
                this.generateStatsFile(stats);
            }
            this.generateStaticReport(stats);
        };
        compiler.hooks.done.tap(this.constructor.name, done);
    }
    generateStatsFile(stats) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const statsFilePath = path.resolve(this.compiler.outputPath, this.opts.statsFilename);
            mkdir.sync(path.dirname(statsFilePath));
            try {
                yield bfj.write(statsFilePath, stats, {
                    promises: 'ignore',
                    buffers: 'ignore',
                    maps: 'ignore',
                    iterables: 'ignore',
                    circular: 'ignore'
                });
            }
            catch (_a) { }
        });
    }
    generateStaticReport(stats) {
        viewer.generateReportData(stats, {
            reportFilename: path.resolve(this.compiler.outputPath, this.opts.reportFilename),
            bundleDir: this.getBundleDirFromCompiler(),
            excludeBundle: this.opts.excludeBundles
        });
    }
    getBundleDirFromCompiler() {
        return this.compiler.outputFileSystem.constructor.name === 'MemoryFileSystem' ? null : this.compiler.outputPath;
    }
}
exports.default = BundleAnalyzerPlugin;
//# sourceMappingURL=BundleAnalyzerPlugin.js.map