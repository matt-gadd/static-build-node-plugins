"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _ = require("lodash");
const Module_1 = require("./Module");
const ContentModule_1 = require("./ContentModule");
const ContentFolder_1 = require("./ContentFolder");
const utils_1 = require("./utils");
class ConcatenatedModule extends Module_1.default {
    constructor(name, data, parent) {
        super(name, data, parent);
        this.name += ' (concatenated)';
        this.children = Object.create(null);
        this.fillContentModules();
    }
    fillContentModules() {
        _.each(this.data.modules, (moduleData) => this.addContentModule(moduleData));
    }
    addContentModule(moduleData) {
        const pathParts = utils_1.getModulePathParts(moduleData);
        if (!pathParts) {
            return;
        }
        const [folders, fileName] = [pathParts.slice(0, -1), _.last(pathParts)];
        let currentFolder = this;
        _.each(folders, (folderName) => {
            let childFolder = currentFolder.getChild(folderName);
            if (!childFolder) {
                childFolder = currentFolder.addChildFolder(new ContentFolder_1.default(folderName, this));
            }
            currentFolder = childFolder;
        });
        const module = new ContentModule_1.default(fileName, moduleData, this);
        currentFolder.addChildModule(module);
    }
    getChild(name) {
        return this.children[name];
    }
    addChildModule(module) {
        module.parent = this;
        this.children[module.name] = module;
    }
    addChildFolder(folder) {
        folder.parent = this;
        this.children[folder.name] = folder;
        return folder;
    }
    toChartData() {
        return Object.assign({}, super.toChartData(), { concatenated: true, groups: _.invokeMap(this.children, 'toChartData') });
    }
}
exports.default = ConcatenatedModule;
//# sourceMappingURL=ConcatenatedModule.js.map