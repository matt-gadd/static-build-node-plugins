"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _ = require("lodash");
const gzipSize = require("gzip-size");
const Module_1 = require("./Module");
const BaseFolder_1 = require("./BaseFolder");
const ConcatenatedModule_1 = require("./ConcatenatedModule");
const utils_1 = require("./utils");
class Folder extends BaseFolder_1.default {
    get parsedSize() {
        return this.src ? this.src.length : undefined;
    }
    get gzipSize() {
        if (!_.has(this, '_gzipSize')) {
            this._gzipSize = this.src ? gzipSize.sync(this.src) : undefined;
        }
        return this._gzipSize;
    }
    addModule(moduleData) {
        const pathParts = utils_1.getModulePathParts(moduleData);
        if (!pathParts) {
            return;
        }
        const [folders, fileName] = [pathParts.slice(0, -1), _.last(pathParts)];
        let currentFolder = this;
        _.each(folders, (folderName) => {
            let childNode = currentFolder.getChild(folderName);
            if (
            // Folder is not created yet
            !childNode ||
                // In some situations (invalid usage of dynamic `require()`) webpack generates a module with empty require
                // context, but it's moduleId points to a directory in filesystem.
                // In this case we replace this `File` node with `Folder`.
                // See `test/stats/with-invalid-dynamic-require.json` as an example.
                !(childNode instanceof Folder)) {
                childNode = currentFolder.addChildFolder(new Folder(folderName));
            }
            currentFolder = childNode;
        });
        const ModuleConstructor = moduleData.modules ? ConcatenatedModule_1.default : Module_1.default;
        const module = new ModuleConstructor(fileName, moduleData, this);
        currentFolder.addChildModule(module);
    }
    toChartData() {
        return Object.assign({}, super.toChartData(), { parsedSize: this.parsedSize, gzipSize: this.gzipSize });
    }
}
exports.default = Folder;
//# sourceMappingURL=Folder.js.map