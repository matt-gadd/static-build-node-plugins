"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const fs = require("fs-extra");
const glob = require("glob");
const mkdir = require("mkdirp");
const analyzer = require("./analyzer");
function generateReportData(bundleStats, opts = {}) {
    const { reportFilename = 'report.html', bundleDir = null, excludeBundle } = opts;
    let excludeBundleRegex;
    if (excludeBundle) {
        excludeBundleRegex = new RegExp(excludeBundle);
    }
    const chartData = analyzer.getViewerData(bundleStats, bundleDir);
    let reportFilePath = reportFilename;
    if (!path.isAbsolute(reportFilePath)) {
        reportFilePath = path.resolve(bundleDir || process.cwd(), reportFilePath);
    }
    mkdir.sync(path.dirname(reportFilePath));
    const bundlesList = [];
    const bundleContent = chartData.reduce((bundleContent, data) => {
        const bundleFilename = data && data.label && data.label.split('/').slice(-1)[0];
        if (excludeBundle && excludeBundleRegex.test(bundleFilename)) {
            return bundleContent;
        }
        bundlesList.push(bundleFilename);
        bundleContent[bundleFilename] = data;
        return bundleContent;
    }, {});
    const reporterFiles = glob.sync(path.join(__dirname, 'reporter', '**', '*.*'));
    reporterFiles.forEach((file) => {
        fs.copySync(file, path.join(path.dirname(reportFilePath), `${path.parse(file).name}${path.parse(file).ext}`));
    });
    fs.writeFileSync(path.join(path.dirname(reportFilePath), `bundleContent.js`), `window.__bundleContent = ${JSON.stringify(bundleContent)}`);
    fs.writeFileSync(path.join(path.dirname(reportFilePath), `bundleList.js`), `window.__bundleList = ${JSON.stringify(bundlesList)}`);
}
exports.generateReportData = generateReportData;
//# sourceMappingURL=viewer.js.map