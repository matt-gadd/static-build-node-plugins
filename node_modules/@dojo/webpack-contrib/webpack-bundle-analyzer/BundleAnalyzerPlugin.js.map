{"version":3,"file":"BundleAnalyzerPlugin.js","sourceRoot":"","sources":["BundleAnalyzerPlugin.ts"],"names":[],"mappings":";;;AAAA,6BAA6B;AAC7B,gCAAgC;AAChC,mCAAmC;AAEnC,MAAM,GAAG,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;AAYjC;IAIC,YAAY,IAAoC;QAC/C,IAAI,CAAC,IAAI,mBACR,cAAc,EAAE,aAAa,EAC7B,iBAAiB,EAAE,KAAK,EACxB,aAAa,EAAE,YAAY,EAC3B,YAAY,EAAE,IAAI,EAClB,YAAY,EAAE,EAAE,EAChB,YAAY,EAAE,KAAK,IAChB,IAAI,CACP,CAAC;IACH,CAAC;IAED,KAAK,CAAC,QAAkB;QACvB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,MAAM,IAAI,GAAG,CAAC,KAAU,EAAE,EAAE;YAC3B,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAC7C,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;gBACjC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;YAC/B,CAAC;YACD,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;QAClC,CAAC,CAAC;QAEF,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IACtD,CAAC;IAEK,iBAAiB,CAAC,KAAU;;YACjC,MAAM,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YACtF,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;YAExC,IAAI,CAAC;gBACJ,MAAM,GAAG,CAAC,KAAK,CAAC,aAAa,EAAE,KAAK,EAAE;oBACrC,QAAQ,EAAE,QAAQ;oBAClB,OAAO,EAAE,QAAQ;oBACjB,IAAI,EAAE,QAAQ;oBACd,SAAS,EAAE,QAAQ;oBACnB,QAAQ,EAAE,QAAQ;iBAClB,CAAC,CAAC;YACJ,CAAC;YAAC,KAAK,CAAC,CAAC,IAAD,CAAC,CAAA,CAAC;QACX,CAAC;KAAA;IAED,oBAAoB,CAAC,KAAU;QAC9B,MAAM,CAAC,kBAAkB,CAAC,KAAK,EAAE;YAChC,cAAc,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC;YAChF,SAAS,EAAE,IAAI,CAAC,wBAAwB,EAAE;YAC1C,aAAa,EAAE,IAAI,CAAC,IAAI,CAAC,cAAc;SACvC,CAAC,CAAC;IACJ,CAAC;IAED,wBAAwB;QACvB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,WAAW,CAAC,IAAI,KAAK,kBAAkB,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC;IACjH,CAAC;CACD;AAvDD,uCAuDC","sourcesContent":["import * as path from 'path';\nimport * as mkdir from 'mkdirp';\nimport * as viewer from './viewer';\nimport { Compiler } from 'webpack';\nconst bfj = require('bfj-node4');\n\nexport interface BundleAnalyzerOptions {\n\treportFilename: string;\n\tgenerateStatsFile: boolean;\n\tstatsFilename: string;\n\tstatsOptions: string | null;\n\tanalyzerMode: string;\n\topenAnalyzer: boolean;\n\texcludeBundles?: string;\n}\n\nexport default class BundleAnalyzerPlugin {\n\tprivate opts: BundleAnalyzerOptions;\n\tprivate compiler: any;\n\n\tconstructor(opts: Partial<BundleAnalyzerOptions>) {\n\t\tthis.opts = {\n\t\t\treportFilename: 'report.html',\n\t\t\tgenerateStatsFile: false,\n\t\t\tstatsFilename: 'stats.json',\n\t\t\tstatsOptions: null,\n\t\t\tanalyzerMode: '',\n\t\t\topenAnalyzer: false,\n\t\t\t...opts\n\t\t};\n\t}\n\n\tapply(compiler: Compiler) {\n\t\tthis.compiler = compiler;\n\t\tconst done = (stats: any) => {\n\t\t\tstats = stats.toJson(this.opts.statsOptions);\n\t\t\tif (this.opts.generateStatsFile) {\n\t\t\t\tthis.generateStatsFile(stats);\n\t\t\t}\n\t\t\tthis.generateStaticReport(stats);\n\t\t};\n\n\t\tcompiler.hooks.done.tap(this.constructor.name, done);\n\t}\n\n\tasync generateStatsFile(stats: any) {\n\t\tconst statsFilePath = path.resolve(this.compiler.outputPath, this.opts.statsFilename);\n\t\tmkdir.sync(path.dirname(statsFilePath));\n\n\t\ttry {\n\t\t\tawait bfj.write(statsFilePath, stats, {\n\t\t\t\tpromises: 'ignore',\n\t\t\t\tbuffers: 'ignore',\n\t\t\t\tmaps: 'ignore',\n\t\t\t\titerables: 'ignore',\n\t\t\t\tcircular: 'ignore'\n\t\t\t});\n\t\t} catch {}\n\t}\n\n\tgenerateStaticReport(stats: any) {\n\t\tviewer.generateReportData(stats, {\n\t\t\treportFilename: path.resolve(this.compiler.outputPath, this.opts.reportFilename),\n\t\t\tbundleDir: this.getBundleDirFromCompiler(),\n\t\t\texcludeBundle: this.opts.excludeBundles\n\t\t});\n\t}\n\n\tgetBundleDirFromCompiler() {\n\t\treturn this.compiler.outputFileSystem.constructor.name === 'MemoryFileSystem' ? null : this.compiler.outputPath;\n\t}\n}\n"]}