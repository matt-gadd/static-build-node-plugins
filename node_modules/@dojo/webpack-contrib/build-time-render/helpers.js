"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const express = require("express");
const getPort = require("get-port");
function navigate(page, useHistory, route) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const promise = new Promise((resolve) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield page.evaluate((route, useHistory) => {
                if (useHistory) {
                    route = route[0] === '/' ? route : `/${route}`;
                    window.history.pushState({}, '', route);
                    window.dispatchEvent(new Event('popstate'));
                }
                else {
                    window.location.hash = route;
                }
            }, route, useHistory);
            setTimeout(resolve, 500);
        }));
        return promise;
    });
}
exports.navigate = navigate;
function serve(directory) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const app = express();
        const port = yield getPort();
        app.use(express.static(directory));
        const promise = new Promise((resolve) => {
            const server = app.listen(port, () => {
                resolve({ server, port });
            });
        });
        return promise;
    });
}
exports.serve = serve;
function getClasses(page) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        return yield page.evaluate(() => {
            // @ts-ignore
            const SHOW_ELEMENT = window.NodeFilter.SHOW_ELEMENT;
            const treeWalker = document.createTreeWalker(document.body, SHOW_ELEMENT);
            let classes = [];
            while (treeWalker.nextNode()) {
                const node = treeWalker.currentNode;
                node.classList.length && classes.push.apply(classes, node.classList);
            }
            classes = classes.map((className) => `.${className}`);
            return classes;
        });
    });
}
exports.getClasses = getClasses;
function setHasFlags(page) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        yield page.evaluateOnNewDocument(() => {
            // @ts-ignore
            window.DojoHasEnvironment = { staticFeatures: { 'build-time-render': true } };
            // @ts-ignore
            window.__public_path__ = '/';
        });
    });
}
exports.setHasFlags = setHasFlags;
function getForSelector(page, selector) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        return page.$eval(selector, (element) => element.outerHTML);
    });
}
exports.getForSelector = getForSelector;
function generateRouteInjectionScript(html, paths, root) {
    return `<script>
(function () {
	var paths = ${JSON.stringify(paths)};
	var html = ${JSON.stringify(html)};
	var element = document.getElementById('${root}');
	var target;
	paths.some(function (path, i) {
		var match = (typeof path === 'string' && path === window.location.hash) || path && (typeof path === 'object' && path.match && new RegExp(path.match.join('|')).test(window.location.hash));
		if (match) {
			target = html[i];
		}
		return match;
	});
	if (target && element) {
		var frag = document.createRange().createContextualFragment(target);
		element.parentNode.replaceChild(frag, element);
	}
}())
</script>`;
}
exports.generateRouteInjectionScript = generateRouteInjectionScript;
function generateBasePath(route = '__app_root__') {
    return `<script>
window.__public_path__ = window.location.pathname.replace(${new RegExp(`${route}(\/)?`)}, '');
</script>`;
}
exports.generateBasePath = generateBasePath;
function getPrefix(path) {
    return path
        ? `${path
            .split('/')
            .map(() => '..')
            .join('/')}/`
        : '';
}
exports.getPrefix = getPrefix;
//# sourceMappingURL=helpers.js.map