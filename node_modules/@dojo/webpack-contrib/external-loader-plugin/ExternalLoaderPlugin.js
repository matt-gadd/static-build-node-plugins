"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const CopyWebpackPlugin = require('copy-webpack-plugin');
const HtmlWebpackIncludeAssetsPlugin = require('html-webpack-include-assets-plugin');
class ExternalLoaderPlugin {
    constructor({ dependencies, outputPath, pathPrefix, hash }) {
        this._dependencies = dependencies;
        this._outputPath = outputPath || 'externals';
        this._hash = Boolean(hash);
        this._pathPrefix = pathPrefix ? `${pathPrefix}/` : '';
    }
    apply(compiler) {
        const prefixPath = (path) => `${this._pathPrefix}${this._outputPath}/${path}`;
        const toInject = this._dependencies.reduce((assets, external) => {
            if (typeof external === 'string') {
                return assets;
            }
            const { inject, to, from } = external;
            if (!inject || !from) {
                return assets;
            }
            const base = to || from;
            const baseDir = base[base.length - 1] === '/' ? base : `${base}/`;
            if (Array.isArray(inject)) {
                return assets.concat(inject.map((path) => prefixPath(`${baseDir}${path}`)));
            }
            return assets.concat(prefixPath(typeof inject === 'string' ? `${baseDir}${inject}` : base));
        }, []);
        const copyPlugin = new CopyWebpackPlugin(this._dependencies.reduce((config, dependency) => typeof dependency === 'string' || !dependency.from
            ? config
            : config.concat([
                {
                    from: `${dependency.from}`,
                    to: prefixPath(dependency.to || dependency.from)
                }
            ]), []));
        const htmlPlugin = new HtmlWebpackIncludeAssetsPlugin({
            assets: toInject,
            append: false,
            files: `${this._pathPrefix}index.html`,
            hash: this._hash
        });
        copyPlugin.apply(compiler);
        htmlPlugin.apply(compiler);
    }
}
exports.default = ExternalLoaderPlugin;
//# sourceMappingURL=ExternalLoaderPlugin.js.map