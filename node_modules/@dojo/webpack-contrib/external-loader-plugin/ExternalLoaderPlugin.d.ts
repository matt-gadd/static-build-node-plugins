import { Compiler } from 'webpack';
export declare type ExternalDescriptor = {
    /**
     * The path that will be used to load this module. This property is used to configure the build to defer to the
     * external loader.
     */
    name?: string;
    /**
     * If this is a boolean, it indicates whether to inject this dependency into the application. If inject is set to
     * true, this dependency should be a script or stylesheet. If this dependency is a directory and contains one or
     * more stylesheets or scripts that  should be injected into the application inject can be set to a string or array
     * of strings that point to the resource(s) to be injected. Only scripts and stylehseets can be injected.
     */
    inject?: boolean | string | string[];
    /**
     * Optional property to indicate how this external should be loaded
     */
    type?: string;
    /**
     * This is used to specify the location, relative to the project root, from where the dependency should be copied.
     */
    from?: string;
    /**
     * This can be used to specify the location, relative to the externals folder, where the dependency should be copied.
     */
    to?: string;
};
/**
 * Describes an external dependency
 */
export declare type ExternalDep = string | ExternalDescriptor;
export interface ExternalLoaderOptions {
    /**
     * The external dependencies
     */
    dependencies: ExternalDep[];
    /**
     * Whether to use the build's hash to cache bust injected dependencies.
     *
     */
    hash?: boolean;
    /**
     * Where to copy dependencies to; defaults to "externals"
     */
    outputPath?: string;
    /**
     * Used to modify where files are placed(e.g. an alternate location for testing)
     */
    pathPrefix?: string;
}
export default class ExternalLoaderPlugin {
    private _dependencies;
    private _outputPath;
    private _pathPrefix;
    private _hash;
    constructor({dependencies, outputPath, pathPrefix, hash}: ExternalLoaderOptions);
    apply(compiler: Compiler): void;
}
