import { Compiler } from 'webpack';
export interface ServiceWorkerOptions {
    bundles?: string[];
    cachePrefix?: string;
    clientsClaim?: boolean;
    excludeBundles?: string[];
    importScripts?: string[];
    precache?: ServiceWorkerPrecacheOptions;
    routes?: ServiceWorkerRoute[];
    skipWaiting?: boolean;
}
export interface ServiceWorkerPrecacheOptions {
    baseDir?: string;
    ignore?: string[];
    include?: string | string[];
    index?: string;
    maxCacheSize?: number;
    strict?: boolean;
    symlinks?: boolean;
}
export interface ServiceWorkerRoute {
    urlPattern: string;
    strategy: ServiceWorkerStrategy;
    options?: ServiceWorkerRouteOptions;
}
export interface ServiceWorkerRouteOptions {
    cacheName?: string;
    cacheableResponse?: {
        statuses?: number[];
        headers?: {
            [key: string]: string;
        };
    };
    expiration?: {
        maxEntries?: number;
        maxAgeSeconds?: number;
    };
    networkTimeoutSeconds?: number;
}
export declare type ServiceWorkerStrategy = 'cacheFirst' | 'networkFirst' | 'networkOnly' | 'staleWhileRevalidate';
/**
 * A custom webpack plugin that either generates a service worker with predefined routes, or copies the specified
 * service worker file to the output directory.
 *
 * @param compiler The webpack compiler instance
 */
export default class ServiceWorkerPlugin {
    private _serviceWorker;
    constructor(serviceWorker: string | ServiceWorkerOptions);
    /**
     * Generate the service worker or copy the custom service worker to the output directory.
     *
     * @param compiler The webpack compiler instance
     */
    apply(compiler: Compiler): void;
    /**
     * @private
     * Return a webpack plugin that copies the specified service worker file to the output directory.
     *
     * @param compiler The webpack compiler instance
     */
    private _copyServiceWorker(compiler);
    /**
     * @private
     * Return an object containing only defined values.
     *
     * @param options The options to filter
     */
    private _getDefinedOptions<T>(options);
}
