{"version":3,"file":"ServiceWorkerPlugin.js","sourceRoot":"","sources":["ServiceWorkerPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["import { Compiler } from 'webpack';\n\nconst CopyWebpackPlugin = require('copy-webpack-plugin');\nconst { GenerateSW } = require('workbox-webpack-plugin');\n\nconst precachePropertiesMap: any = {\n\tbaseDir: 'globDirectory',\n\tignore: 'globIgnores',\n\tinclude: 'globPatterns',\n\tindex: 'directoryIndex',\n\tmaxCacheSize: 'maximumFileSizeToCacheInBytes',\n\tstrict: 'globStrict',\n\tsymlinks: 'globFollow'\n};\n\nexport interface ServiceWorkerOptions {\n\tbundles?: string[];\n\tcachePrefix?: string;\n\tclientsClaim?: boolean;\n\texcludeBundles?: string[];\n\timportScripts?: string[];\n\tprecache?: ServiceWorkerPrecacheOptions;\n\troutes?: ServiceWorkerRoute[];\n\tskipWaiting?: boolean;\n}\n\nexport interface ServiceWorkerPrecacheOptions {\n\tbaseDir?: string;\n\tignore?: string[];\n\tinclude?: string | string[];\n\tindex?: string;\n\tmaxCacheSize?: number;\n\tstrict?: boolean;\n\tsymlinks?: boolean;\n}\n\nexport interface ServiceWorkerRoute {\n\turlPattern: string;\n\tstrategy: ServiceWorkerStrategy;\n\toptions?: ServiceWorkerRouteOptions;\n}\n\nexport interface ServiceWorkerRouteOptions {\n\tcacheName?: string;\n\tcacheableResponse?: { statuses?: number[]; headers?: { [key: string]: string } };\n\texpiration?: { maxEntries?: number; maxAgeSeconds?: number };\n\tnetworkTimeoutSeconds?: number;\n}\n\nexport type ServiceWorkerStrategy = 'cacheFirst' | 'networkFirst' | 'networkOnly' | 'staleWhileRevalidate';\n\ninterface WorkboxPrecacheOptions {\n\tcacheId?: string;\n\tclientsClaim?: boolean;\n\tdirectoryIndex?: string;\n\tglobDirectory?: string;\n\tglobFollow?: boolean;\n\tglobIgnore?: string[];\n\tglobPatterns?: string | string[];\n\tglobStrict?: boolean;\n\tmaximumFileSizeToCacheInBytes?: number;\n\tskipWaiting?: boolean;\n}\n\n/**\n * A custom webpack plugin that either generates a service worker with predefined routes, or copies the specified\n * service worker file to the output directory.\n *\n * @param compiler The webpack compiler instance\n */\nexport default class ServiceWorkerPlugin {\n\tprivate _serviceWorker: string | ServiceWorkerOptions;\n\n\tconstructor(serviceWorker: string | ServiceWorkerOptions) {\n\t\tthis._serviceWorker = serviceWorker;\n\t}\n\n\t/**\n\t * Generate the service worker or copy the custom service worker to the output directory.\n\t *\n\t * @param compiler The webpack compiler instance\n\t */\n\tapply(compiler: Compiler) {\n\t\tif (typeof this._serviceWorker === 'string') {\n\t\t\treturn this._copyServiceWorker(compiler);\n\t\t}\n\n\t\tconst {\n\t\t\tbundles,\n\t\t\tcachePrefix,\n\t\t\tclientsClaim,\n\t\t\texcludeBundles,\n\t\t\timportScripts = [],\n\t\t\tprecache = {},\n\t\t\troutes = [],\n\t\t\tskipWaiting\n\t\t} = this._serviceWorker;\n\n\t\tconst precacheProperties = Object.keys(precache).reduce((precacheProperties: WorkboxPrecacheOptions, key) => {\n\t\t\tconst workboxKey: keyof WorkboxPrecacheOptions = precachePropertiesMap[key];\n\t\t\tif (workboxKey) {\n\t\t\t\tprecacheProperties[workboxKey] = (precache as any)[key];\n\t\t\t}\n\t\t\treturn precacheProperties;\n\t\t}, Object.create(null));\n\n\t\tconst generateSW = new GenerateSW(\n\t\t\tthis._getDefinedOptions({\n\t\t\t\t...precacheProperties,\n\t\t\t\tcacheId: cachePrefix,\n\t\t\t\tchunks: bundles,\n\t\t\t\tclientsClaim,\n\t\t\t\texcludeChunks: excludeBundles,\n\t\t\t\timportScripts,\n\t\t\t\timportWorkboxFrom: 'local',\n\t\t\t\tskipWaiting,\n\t\t\t\truntimeCaching: routes.map((route) => {\n\t\t\t\t\tconst { options = {}, strategy, urlPattern } = route;\n\t\t\t\t\tconst { cacheName, cacheableResponse, expiration, networkTimeoutSeconds } = options;\n\n\t\t\t\t\tif (!urlPattern || !strategy) {\n\t\t\t\t\t\tthrow new Error('Each route must have both a `urlPattern` and `strategy`');\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\turlPattern: new RegExp(urlPattern),\n\t\t\t\t\t\thandler: strategy,\n\t\t\t\t\t\toptions: this._getDefinedOptions({\n\t\t\t\t\t\t\tcacheName,\n\t\t\t\t\t\t\tcacheableResponse,\n\t\t\t\t\t\t\texpiration,\n\t\t\t\t\t\t\tnetworkTimeoutSeconds\n\t\t\t\t\t\t})\n\t\t\t\t\t};\n\t\t\t\t})\n\t\t\t})\n\t\t);\n\t\tgenerateSW.apply(compiler);\n\t}\n\n\t/**\n\t * @private\n\t * Return a webpack plugin that copies the specified service worker file to the output directory.\n\t *\n\t * @param compiler The webpack compiler instance\n\t */\n\tprivate _copyServiceWorker(compiler: Compiler) {\n\t\tif (!this._serviceWorker) {\n\t\t\tthrow new Error('The service worker path must be a non-empty string');\n\t\t}\n\n\t\tcompiler.hooks.beforeRun.tapAsync(this.constructor.name, (compiler, next) => {\n\t\t\tnew CopyWebpackPlugin({ from: this._serviceWorker }).apply(compiler);\n\t\t\tnext();\n\t\t});\n\t}\n\n\t/**\n\t * @private\n\t * Return an object containing only defined values.\n\t *\n\t * @param options The options to filter\n\t */\n\tprivate _getDefinedOptions<T>(options: Partial<T>): Partial<T> {\n\t\treturn Object.keys(options).reduce((filtered, key) => {\n\t\t\tconst value = (options as any)[key];\n\t\t\tif (typeof value !== 'undefined') {\n\t\t\t\tfiltered[key] = value;\n\t\t\t}\n\t\t\treturn filtered;\n\t\t}, Object.create(null));\n\t}\n}\n"]}