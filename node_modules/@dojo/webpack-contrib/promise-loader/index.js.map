{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":";;AAAA,6BAA6B;AAC7B,MAAM,WAAW,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AAE5C,eAAiC,gBAAwB;IACxD,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;IACnC,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACjD,MAAM,UAAU,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;IAC5B,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC;IACjD,MAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,gBAAgB,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;IACrE,IAAI,UAAU,GAAG,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;IAEhC,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;IAEtF,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;QACjB,MAAM,IAAI,KAAK,CACd,gGAAgG,CAChG,CAAC;IACH,CAAC;IAED,MAAM,cAAc,GACnB,UAAU,KAAK,QAAQ,CAAC,CAAC,CAAC,wBAAwB,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC;IAE/F,MAAM,MAAM,GAAG,GAAG,cAAc;;;;oBAIb,WAAW,CAAC,gBAAgB,CAAC,IAAI,EAAE,IAAI,GAAG,gBAAgB,CAAC;IAC3E,UAAU,IAAI,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC;;EAEjD,CAAC;IAEF,MAAM,CAAC,MAAM,CAAC;AACf,CAAC;AA7BD,sBA6BC;AAED,kBAAe,GAAG,EAAE,GAAE,CAAC,CAAC","sourcesContent":["import * as path from 'path';\nconst loaderUtils = require('loader-utils');\n\nexport function pitch(this: any, remainingRequest: string) {\n\tthis.cacheable && this.cacheable();\n\tconst query = this.query.substring(1).split(',');\n\tconst promiseLib = query[0];\n\tconst filename = path.basename(remainingRequest);\n\tconst name = path.basename(remainingRequest, path.extname(filename));\n\tlet bundleName = query[1] || '';\n\n\tbundleName = bundleName.replace(/\\[filename\\]/g, filename).replace(/\\[name\\]/g, name);\n\n\tif (!promiseLib) {\n\t\tthrow new Error(\n\t\t\t'You need to specify your Promise library of choice, e.g. require(\"promise?bluebird!./file.js\")'\n\t\t);\n\t}\n\n\tconst requirePromise =\n\t\tpromiseLib !== 'global' ? 'var Promise = require(' + JSON.stringify(promiseLib) + ');\\n' : '';\n\n\tconst result = `${requirePromise}\nmodule.exports = function () {\n\treturn new Promise(function (resolve) {\n\trequire.ensure([], function (require) {\n\t\tresolve(require(${loaderUtils.stringifyRequest(this, '!!' + remainingRequest)}));\n\t}${bundleName && ', ' + JSON.stringify(bundleName)});\n\t});\n}`;\n\n\treturn result;\n}\n\nexport default () => {};\n"]}