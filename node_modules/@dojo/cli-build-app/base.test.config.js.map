{"version":3,"file":"base.test.config.js","sourceRoot":"","sources":["../../../src/base.test.config.ts"],"names":[],"mappings":";;AACA,+CAA+D;AAE/D,MAAM,aAAa,GAAG,OAAO,CAAC,wBAAwB,CAAC,CAAC;AAExD,uBAAuB,IAAS;IAC/B,MAAM,MAAM,GAAG,qBAAiB,CAAC,IAAI,CAAC,CAAC;IACvC,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,MAAM,CAAC;IACnC,MAAM,SAAS,GAAW,MAAM,CAAC,SAAmB,IAAI,EAAE,CAAC;IAE3D,MAAM,mBAAmB,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;IAEnE,MAAM,CAAC,OAAO,GAAG;QAChB,GAAG,OAAQ;QACX,IAAI,aAAa,CAAC;YACjB,IAAI,EAAE,gBAAgB;YACtB,MAAM,EAAE,0DAA0D,yBAAW,qBAAqB;SAClG,CAAC;KACF,CAAC;IAEF,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;QACZ,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;YACxC,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC7B,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE;oBAClC,EAAE,CAAC,CAAC,OAAO,MAAM,KAAK,QAAQ,CAAC,CAAC,CAAC;wBAChC,MAAM,CAAC,MAAM,CAAC;oBACf,CAAC;oBACD,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,GAAG,MAA+B,CAAC;oBAC/D,EAAE,CAAC,CAAC,UAAU,KAAK,mBAAmB,CAAC,CAAC,CAAC;wBACxC,MAAM,CAAC;4BACN,MAAM,EAAE,UAAU;4BAClB,OAAO,EAAE,EAAE;yBACX,CAAC;oBACH,CAAC;oBACD,MAAM,CAAC,MAAM,CAAC;gBACf,CAAC,CAAC,CAAC;YACJ,CAAC;YACD,MAAM,CAAC,IAAI,CAAC;QACb,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC;YACjB,IAAI,EAAE,sBAAsB;YAC5B,GAAG,EAAE;gBACJ,MAAM,EAAE,8BAA8B;gBACtC,OAAO,EAAE,mBAAmB;aAC5B;YACD,OAAO,EAAE,MAAM;SACf,CAAC,CAAC;IACJ,CAAC;IAED,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAC1B,MAAM,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,MAAM,CAAC,OAAO,GAAG,mBAAmB,CAAC;IACrC,MAAM,CAAC,MAAM,CAAC;AACf,CAAC;AAED,kBAAe,aAAa,CAAC","sourcesContent":["import * as webpack from 'webpack';\nimport baseConfigFactory, { libraryName } from './base.config';\n\nconst WrapperPlugin = require('wrapper-webpack-plugin');\n\nfunction webpackConfig(args: any): webpack.Configuration {\n\tconst config = baseConfigFactory(args);\n\tconst { plugins, module } = config;\n\tconst externals: any[] = (config.externals as any[]) || [];\n\n\tconst instrumenterOptions = args.legacy ? {} : { esModules: true };\n\n\tconfig.plugins = [\n\t\t...plugins!,\n\t\tnew WrapperPlugin({\n\t\t\ttest: /(all.*(\\.js$))/,\n\t\t\tfooter: `typeof define === 'function' && define.amd && define(['${libraryName}'], function() {});`\n\t\t})\n\t];\n\n\tif (module) {\n\t\tmodule.rules = module.rules.map((rule) => {\n\t\t\tif (Array.isArray(rule.use)) {\n\t\t\t\trule.use = rule.use.map((loader) => {\n\t\t\t\t\tif (typeof loader === 'string') {\n\t\t\t\t\t\treturn loader;\n\t\t\t\t\t}\n\t\t\t\t\tconst { loader: loaderName } = loader as webpack.RuleSetLoader;\n\t\t\t\t\tif (loaderName === 'umd-compat-loader') {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tloader: loaderName,\n\t\t\t\t\t\t\toptions: {}\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\treturn loader;\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn rule;\n\t\t});\n\t\tmodule.rules.push({\n\t\t\ttest: /src[\\\\\\/].*\\.ts(x)?$/,\n\t\t\tuse: {\n\t\t\t\tloader: 'istanbul-instrumenter-loader',\n\t\t\t\toptions: instrumenterOptions\n\t\t\t},\n\t\t\tenforce: 'post'\n\t\t});\n\t}\n\n\texternals.push(/^intern/);\n\tconfig.externals = externals;\n\tconfig.devtool = 'inline-source-map';\n\treturn config;\n}\n\nexport default webpackConfig;\n"]}