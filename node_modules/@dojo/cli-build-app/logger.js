"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const logUpdate = require("log-update");
const logSymbols = require("log-symbols");
const gzipSize = require("gzip-size");
const typescript = require("typescript");
const jsonFile = require("jsonfile");
const chalk_1 = require("chalk");
const pkgDir = require('pkg-dir');
const columns = require('cli-columns');
const stripAnsi = require('strip-ansi');
const version = jsonFile.readFileSync(path.join(pkgDir.sync(__dirname), 'package.json')).version;
function logger(stats, config, runningMessage = '') {
    const assets = stats.assets
        .map((asset) => {
        const size = (asset.size / 1000).toFixed(2);
        const assetInfo = `${asset.name} ${chalk_1.default.yellow(`(${size}kb)`)}`;
        const contentFilePath = path.join(config.output.path, asset.name);
        if (!fs.existsSync(contentFilePath)) {
            return assetInfo;
        }
        const content = fs.readFileSync(contentFilePath, 'utf-8');
        const compressedSize = (gzipSize.sync(content) / 1000).toFixed(2);
        return `${assetInfo} / ${chalk_1.default.blue(`(${compressedSize}kb gz)`)}`;
    })
        .filter((output) => output);
    const chunks = stats.chunks.map((chunk) => {
        return `${chunk.names[0]}`;
    });
    let errors = '';
    let warnings = '';
    let signOff = chalk_1.default.green('The build completed successfully.');
    if (stats.warnings.length) {
        signOff = chalk_1.default.yellow('The build completed with warnings.');
        warnings = `
${chalk_1.default.yellow('warnings:')}
${chalk_1.default.gray(stats.warnings.map((warning) => stripAnsi(warning)))}
`;
    }
    if (stats.errors.length) {
        signOff = chalk_1.default.red('The build completed with errors.');
        errors = `
${chalk_1.default.yellow('errors:')}
${chalk_1.default.red(stats.errors.map((error) => stripAnsi(error)))}
`;
    }
    if (runningMessage) {
        signOff += `\n\n${runningMessage}`;
    }
    logUpdate(`
${logSymbols.info} cli-build-app: ${version}
${logSymbols.info} typescript: ${typescript.version}
${logSymbols.success} hash: ${stats.hash}
${logSymbols.error} errors: ${stats.errors.length}
${logSymbols.warning} warnings: ${stats.warnings.length}
${errors}${warnings}
${chalk_1.default.yellow('chunks:')}
${columns(chunks)}
${chalk_1.default.yellow('assets:')}
${columns(assets)}
${chalk_1.default.yellow(`output at: ${chalk_1.default.cyan(chalk_1.default.underline(`file:///${config.output.path}`))}`)}

${signOff}
	`);
    return !!errors;
}
exports.default = logger;
//# sourceMappingURL=logger.js.map