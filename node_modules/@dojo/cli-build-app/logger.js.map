{"version":3,"file":"logger.js","sourceRoot":"","sources":["logger.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\nimport * as logUpdate from 'log-update';\nimport * as logSymbols from 'log-symbols';\nimport * as gzipSize from 'gzip-size';\nimport * as typescript from 'typescript';\nimport * as jsonFile from 'jsonfile';\nimport chalk from 'chalk';\n\nconst pkgDir = require('pkg-dir');\nconst columns = require('cli-columns');\nconst stripAnsi = require('strip-ansi');\nconst version = jsonFile.readFileSync(path.join(pkgDir.sync(__dirname), 'package.json')).version;\n\nexport default function logger(stats: any, config: any, runningMessage: string = ''): boolean {\n\tconst assets = stats.assets\n\t\t.map((asset: any) => {\n\t\t\tconst size = (asset.size / 1000).toFixed(2);\n\t\t\tconst assetInfo = `${asset.name} ${chalk.yellow(`(${size}kb)`)}`;\n\t\t\tconst contentFilePath = path.join(config.output.path, asset.name);\n\n\t\t\tif (!fs.existsSync(contentFilePath)) {\n\t\t\t\treturn assetInfo;\n\t\t\t}\n\n\t\t\tconst content = fs.readFileSync(contentFilePath, 'utf-8');\n\t\t\tconst compressedSize = (gzipSize.sync(content) / 1000).toFixed(2);\n\t\t\treturn `${assetInfo} / ${chalk.blue(`(${compressedSize}kb gz)`)}`;\n\t\t})\n\t\t.filter((output: string) => output);\n\n\tconst chunks = stats.chunks.map((chunk: any) => {\n\t\treturn `${chunk.names[0]}`;\n\t});\n\n\tlet errors = '';\n\tlet warnings = '';\n\tlet signOff = chalk.green('The build completed successfully.');\n\n\tif (stats.warnings.length) {\n\t\tsignOff = chalk.yellow('The build completed with warnings.');\n\t\twarnings = `\n${chalk.yellow('warnings:')}\n${chalk.gray(stats.warnings.map((warning: string) => stripAnsi(warning)))}\n`;\n\t}\n\n\tif (stats.errors.length) {\n\t\tsignOff = chalk.red('The build completed with errors.');\n\t\terrors = `\n${chalk.yellow('errors:')}\n${chalk.red(stats.errors.map((error: string) => stripAnsi(error)))}\n`;\n\t}\n\n\tif (runningMessage) {\n\t\tsignOff += `\\n\\n${runningMessage}`;\n\t}\n\n\tlogUpdate(`\n${logSymbols.info} cli-build-app: ${version}\n${logSymbols.info} typescript: ${typescript.version}\n${logSymbols.success} hash: ${stats.hash}\n${logSymbols.error} errors: ${stats.errors.length}\n${logSymbols.warning} warnings: ${stats.warnings.length}\n${errors}${warnings}\n${chalk.yellow('chunks:')}\n${columns(chunks)}\n${chalk.yellow('assets:')}\n${columns(assets)}\n${chalk.yellow(`output at: ${chalk.cyan(chalk.underline(`file:///${config.output.path}`))}`)}\n\n${signOff}\n\t`);\n\treturn !!errors;\n}\n"]}